package com.google.flatbuffers.kotlin

import MyGame.Example.Monster
import kotlin.test.assertEquals

@ExperimentalUnsignedTypes
public fun main(args: Array<String>) {
  val fbb = FlatBufferBuilder(16)
  var str = fbb.createString("ByteMonster")
  val data = ubyteArrayOf(0u, 1u, 2u, 3u, 4u, 5u, 6u, 7u, 8u, 9u)
  var offset = Monster.createInventoryVector(fbb, data)
//  Monster.startMonster(fbb)
//  Monster.addName(fbb, str)
//  Monster.addInventory(fbb, offset)
//  var monster1 = Monster.endMonster(fbb)
//  Monster.finishMonsterBuffer(fbb, monster1)
//
//  val monsterObject = Monster.getRootAsMonster(fbb.dataBuffer())
//  assertEquals("ByteMonster", monsterObject.name)
//  assertEquals(data.size, monsterObject.inventoryLength)
//  assertEquals(monsterObject.inventory(4), data[4])
//  offset = fbb.createByteVector(data.toByteArray())
//  str = fbb.createString("ByteMonster")
//  Monster.startMonster(fbb)
//  Monster.addName(fbb, str)
//  Monster.addInventory(fbb, offset)
//  monster1 = Monster.endMonster(fbb)
//  Monster.finishMonsterBuffer(fbb, monster1)
//  val monsterObject2 = Monster.getRootAsMonster(fbb.dataBuffer())
//  assertEquals(monsterObject2.inventoryLength, data.size)
//  for (i in data.indices) {
//    assertEquals(monsterObject2.inventory(i), data[i])
//  }
//  fbb.clear()
//  offset = fbb.createByteVector(data.toByteArray(), 3, 4)
//  str = fbb.createString("ByteMonster")
//  Monster.startMonster(fbb)
//  Monster.addName(fbb, str)
//  Monster.addInventory(fbb, offset)
//  monster1 = Monster.endMonster(fbb)
//  Monster.finishMonsterBuffer(fbb, monster1)
//  val monsterObject3 = Monster.getRootAsMonster(fbb.dataBuffer())
//  assertEquals(monsterObject3.inventoryLength, 4)
//  assertEquals(monsterObject3.inventory(0), data[3])
//  fbb.clear()
//  offset = Monster.createInventoryVector(fbb, data)
//  str = fbb.createString("ByteMonster")
//  Monster.startMonster(fbb)
//  Monster.addName(fbb, str)
//  Monster.addInventory(fbb, offset)
//  monster1 = Monster.endMonster(fbb)
//  Monster.finishMonsterBuffer(fbb, monster1)
//  val monsterObject4 = Monster.getRootAsMonster(fbb.dataBuffer())
//  assertEquals(monsterObject4.inventoryLength, data.size)
//  assertEquals(monsterObject4.inventory(8), 8u)
//  fbb.clear()
//  val largeData = ByteArray(1024)
//  offset = fbb.createByteVector(largeData)
//  str = fbb.createString("ByteMonster")
//  Monster.startMonster(fbb)
//  Monster.addName(fbb, str)
//  Monster.addInventory(fbb, offset)
//  monster1 = Monster.endMonster(fbb)
//  Monster.finishMonsterBuffer(fbb, monster1)
//  val monsterObject5 = Monster.getRootAsMonster(fbb.dataBuffer())
//  assertEquals(monsterObject5.inventoryLength, largeData.size)
//  assertEquals(monsterObject5.inventory(25), largeData[25].toUByte())
//  fbb.clear()
//  val bb = ArrayReadBuffer(largeData, 512)
//  offset = fbb.createByteVector(bb)
//  str = fbb.createString("ByteMonster")
//  Monster.startMonster(fbb)
//  Monster.addName(fbb, str)
//  Monster.addInventory(fbb, offset)
//  monster1 = Monster.endMonster(fbb)
//  Monster.finishMonsterBuffer(fbb, monster1)
//  val monsterObject6 = Monster.getRootAsMonster(fbb.dataBuffer())
//  assertEquals(monsterObject6.inventoryLength, 512)
//  assertEquals(monsterObject6.inventory(0), largeData[0].toUByte())
//  fbb.clear()
////    bb = groovyjarjarantlr.ByteBuffer.wrap(largeData)
////    bb.limit(256)
//  offset = fbb.createByteVector(largeData)
//  str = fbb.createString("ByteMonster")
//  Monster.startMonster(fbb)
//  Monster.addName(fbb, str)
//  Monster.addInventory(fbb, offset)
//  monster1 = Monster.endMonster(fbb)
//  Monster.finishMonsterBuffer(fbb, monster1)
//  val monsterObject7 = Monster.getRootAsMonster(fbb.dataBuffer())
//  assertEquals(monsterObject7.inventoryLength, 1024)
//  fbb.clear()
//  //bb = groovyjarjarantlr.ByteBuffer.allocateDirect(2048)
//  offset = fbb.createByteVector(largeData)
//  str = fbb.createString("ByteMonster")
//  Monster.startMonster(fbb)
//  Monster.addName(fbb, str)
//  Monster.addInventory(fbb, offset)
//  monster1 = Monster.endMonster(fbb)
//  Monster.finishMonsterBuffer(fbb, monster1)
//  val monsterObject8 = Monster.getRootAsMonster(fbb.dataBuffer())
//  assertEquals(monsterObject8.inventoryLength, 1024)
}
